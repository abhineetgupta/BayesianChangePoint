function structOut = importOKCatalogfile(filename, startRow, endRow)
% Auto-generated by MATLAB on 2014/01/07 19:08:38
% File imports earthquake catalog data from Oklahoma Geological Survey csv
% file into a Matlab struct.
%IMPORTFILE Import numeric data from a text file as a matrix.
%   STRUCTURE = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   STRUCTURE = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   structure = importfile('complete.csv', 1, 8331);
%
%    See also TEXTSCAN.

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = [dataArray{:,1:end-1}];
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,3,4,5,12,17,25]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(2:end, [1,3,4,5,12,17,25]);
rawCellColumns = raw(2:end, [2,6,7,8,9,10,11,13,14,15,16,18,19,20,21,22,23,24,26,27,28,29]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
structure = dataset;
structure.id = cell2mat(rawNumericColumns(:, 1));
structure.originTime = rawCellColumns(:, 1);
structure.latitude = cell2mat(rawNumericColumns(:, 2));
structure.longitude = cell2mat(rawNumericColumns(:, 3));
structure.depth = cell2mat(rawNumericColumns(:, 4));
structure.errLon = rawCellColumns(:, 2);
structure.errLat = rawCellColumns(:, 3);
structure.errDepth = rawCellColumns(:, 4);
structure.errOriginTime = rawCellColumns(:, 5);
structure.county = rawCellColumns(:, 6);
structure.originSrc = rawCellColumns(:, 7);
structure.prefMag = cell2mat(rawNumericColumns(:, 5));
structure.pmagType = rawCellColumns(:, 8);
structure.pmagSrc = rawCellColumns(:, 9);
structure.mw = rawCellColumns(:, 10);
structure.mwSrc = rawCellColumns(:, 11);
structure.mblgOGS = cell2mat(rawNumericColumns(:, 6));
structure.mblgUSGS = rawCellColumns(:, 12);
structure.mlOGS = rawCellColumns(:, 13);
structure.m3hzOGS = rawCellColumns(:, 14);
structure.mdOGS = rawCellColumns(:, 15);
structure.mb = rawCellColumns(:, 16);
structure.ms = rawCellColumns(:, 17);
structure.mfa = rawCellColumns(:, 18);
structure.maxMMI = cell2mat(rawNumericColumns(:, 7));
structure.reafile = rawCellColumns(:, 19);
structure.reamTime = rawCellColumns(:, 20);
structure.geom = rawCellColumns(:, 21);
structure.pdlid = rawCellColumns(:, 22);

%% Create secondary variables
[structure.originYear, structure.originMonth, structure.originDay, ...
    structure.originHour, structure.originMinute, structure.originSec]...
    = datevec(datenum(structure.originTime, 'yyyy-mm-dd HH:MM:SS'));

%% Convert dataset to structure
structOut = dataset2struct(structure);
